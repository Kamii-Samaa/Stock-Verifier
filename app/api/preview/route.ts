import { type NextRequest, NextResponse } from "next/server";
import { getSheetPreview } from "@/lib/file-utils"; // Adjust path if necessary

export async function POST(request: NextRequest) {
  try {
    // Expects a fileId (unique filename generated by the upload endpoint)
    // and the sheetName to preview.
    const { fileId, sheetName } = await request.json();

    if (!fileId || !sheetName) {
      return NextResponse.json({ error: "File identifier and sheet name are required" }, { status: 400 });
    }

    // getSheetPreview will construct the full path and read the file
    // It already handles errors like file not found or sheet not found
    const previewData = await getSheetPreview(fileId, sheetName);

    return NextResponse.json(previewData); // previewData should be { headers: [], rows: [] }
  } catch (error) {
    console.error("Error generating preview:", error);
    const message = error instanceof Error ? error.message : "Failed to generate sheet preview";
    // Consider more specific status codes based on error type if possible
    // For example, if error.message indicates "File not found", status could be 404
    if (error instanceof Error && (error.message.includes("File not found") || error.message.includes("File no longer exists"))) {
      return NextResponse.json({ error: "Uploaded file not found. Please upload again." }, { status: 404 });
    }
    if (error instanceof Error && error.message.includes("Sheet") && error.message.includes("not found")) {
        return NextResponse.json({ error: error.message }, { status: 404 });
    }
    return NextResponse.json({ error: message }, { status: 500 });
  }
}
